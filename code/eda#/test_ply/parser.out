Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expression
Rule 1     expression -> NUMBER
Rule 2     expression -> expression PLUS expression
Rule 3     expression -> expression MINUS expression
Rule 4     expression -> expression MULT expression
Rule 5     expression -> expression DIV expression

Terminals, with rules where they appear

DIV                  : 5
MINUS                : 3
MULT                 : 4
NUMBER               : 1
PLUS                 : 2
error                : 

Nonterminals, with rules where they appear

expression           : 2 2 3 3 4 4 5 5 0

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . NUMBER
    (2) expression -> . expression PLUS expression
    (3) expression -> . expression MINUS expression
    (4) expression -> . expression MULT expression
    (5) expression -> . expression DIV expression

    NUMBER          shift and go to state 2

    expression                     shift and go to state 1

state 1

    (0) S' -> expression .
    (2) expression -> expression . PLUS expression
    (3) expression -> expression . MINUS expression
    (4) expression -> expression . MULT expression
    (5) expression -> expression . DIV expression

    PLUS            shift and go to state 3
    MINUS           shift and go to state 4
    MULT            shift and go to state 5
    DIV             shift and go to state 6


state 2

    (1) expression -> NUMBER .

    PLUS            reduce using rule 1 (expression -> NUMBER .)
    MINUS           reduce using rule 1 (expression -> NUMBER .)
    MULT            reduce using rule 1 (expression -> NUMBER .)
    DIV             reduce using rule 1 (expression -> NUMBER .)
    $end            reduce using rule 1 (expression -> NUMBER .)


state 3

    (2) expression -> expression PLUS . expression
    (1) expression -> . NUMBER
    (2) expression -> . expression PLUS expression
    (3) expression -> . expression MINUS expression
    (4) expression -> . expression MULT expression
    (5) expression -> . expression DIV expression

    NUMBER          shift and go to state 2

    expression                     shift and go to state 7

state 4

    (3) expression -> expression MINUS . expression
    (1) expression -> . NUMBER
    (2) expression -> . expression PLUS expression
    (3) expression -> . expression MINUS expression
    (4) expression -> . expression MULT expression
    (5) expression -> . expression DIV expression

    NUMBER          shift and go to state 2

    expression                     shift and go to state 8

state 5

    (4) expression -> expression MULT . expression
    (1) expression -> . NUMBER
    (2) expression -> . expression PLUS expression
    (3) expression -> . expression MINUS expression
    (4) expression -> . expression MULT expression
    (5) expression -> . expression DIV expression

    NUMBER          shift and go to state 2

    expression                     shift and go to state 9

state 6

    (5) expression -> expression DIV . expression
    (1) expression -> . NUMBER
    (2) expression -> . expression PLUS expression
    (3) expression -> . expression MINUS expression
    (4) expression -> . expression MULT expression
    (5) expression -> . expression DIV expression

    NUMBER          shift and go to state 2

    expression                     shift and go to state 10

state 7

    (2) expression -> expression PLUS expression .
    (2) expression -> expression . PLUS expression
    (3) expression -> expression . MINUS expression
    (4) expression -> expression . MULT expression
    (5) expression -> expression . DIV expression

    PLUS            reduce using rule 2 (expression -> expression PLUS expression .)
    $end            reduce using rule 2 (expression -> expression PLUS expression .)
    MINUS           shift and go to state 4
    MULT            shift and go to state 5
    DIV             shift and go to state 6

  ! MINUS           [ reduce using rule 2 (expression -> expression PLUS expression .) ]
  ! MULT            [ reduce using rule 2 (expression -> expression PLUS expression .) ]
  ! DIV             [ reduce using rule 2 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 3 ]


state 8

    (3) expression -> expression MINUS expression .
    (2) expression -> expression . PLUS expression
    (3) expression -> expression . MINUS expression
    (4) expression -> expression . MULT expression
    (5) expression -> expression . DIV expression

    PLUS            reduce using rule 3 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 3 (expression -> expression MINUS expression .)
    $end            reduce using rule 3 (expression -> expression MINUS expression .)
    MULT            shift and go to state 5
    DIV             shift and go to state 6

  ! MULT            [ reduce using rule 3 (expression -> expression MINUS expression .) ]
  ! DIV             [ reduce using rule 3 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 3 ]
  ! MINUS           [ shift and go to state 4 ]


state 9

    (4) expression -> expression MULT expression .
    (2) expression -> expression . PLUS expression
    (3) expression -> expression . MINUS expression
    (4) expression -> expression . MULT expression
    (5) expression -> expression . DIV expression

    PLUS            reduce using rule 4 (expression -> expression MULT expression .)
    MINUS           reduce using rule 4 (expression -> expression MULT expression .)
    MULT            reduce using rule 4 (expression -> expression MULT expression .)
    $end            reduce using rule 4 (expression -> expression MULT expression .)
    DIV             shift and go to state 6

  ! DIV             [ reduce using rule 4 (expression -> expression MULT expression .) ]
  ! PLUS            [ shift and go to state 3 ]
  ! MINUS           [ shift and go to state 4 ]
  ! MULT            [ shift and go to state 5 ]


state 10

    (5) expression -> expression DIV expression .
    (2) expression -> expression . PLUS expression
    (3) expression -> expression . MINUS expression
    (4) expression -> expression . MULT expression
    (5) expression -> expression . DIV expression

    PLUS            reduce using rule 5 (expression -> expression DIV expression .)
    MINUS           reduce using rule 5 (expression -> expression DIV expression .)
    MULT            reduce using rule 5 (expression -> expression DIV expression .)
    DIV             reduce using rule 5 (expression -> expression DIV expression .)
    $end            reduce using rule 5 (expression -> expression DIV expression .)

  ! PLUS            [ shift and go to state 3 ]
  ! MINUS           [ shift and go to state 4 ]
  ! MULT            [ shift and go to state 5 ]
  ! DIV             [ shift and go to state 6 ]

